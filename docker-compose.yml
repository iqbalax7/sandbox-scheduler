version: '3.8'

services:
  # MongoDB database
  mongodb:
    image: mongo:6.0
    container_name: sandbox-scheduler-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: sandbox_scheduler
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - scheduler-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: sandbox-scheduler-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/sandbox_scheduler?authSource=admin
    ports:
      - "4000:4000"
    volumes:
      - backend_logs:/app/logs
    networks:
      - scheduler-network
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend web service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sandbox-scheduler-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - scheduler-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for caching (optional, for future use)
  redis:
    image: redis:7-alpine
    container_name: sandbox-scheduler-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - scheduler-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

networks:
  scheduler-network:
    driver: bridge
    name: scheduler-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
